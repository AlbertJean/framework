#include "Path.h"
#include "ResIndexCompiler.h"
#include "StreamWriter.h"
#include "StringEx.h"

void ResIndexCompiler::Validate(ResIndex& index)
{
	// todo: require original filename
}

/*
void ResIndexCompiler::CopyResources(ResIndex& index, std::string dstPath)
{
	// todo: require original filename
	// todo: require destination folder
}
*/

void ResIndexCompiler::Compile(ResIndex& index, std::string name, std::string headerFileName, std::string platform, Stream* indexStream, Stream* headerStream, Stream* sourceStream)
{
	StreamWriter headerWriter(headerStream, false);
	StreamWriter sourceWriter(sourceStream, false);
	
	// filter resource index
	
	index.FilterByPlatform(platform);
		
	// create header file
	
//	printf("creating header file\n");
	
	headerWriter.WriteLine("#pragma once");
	headerWriter.WriteLine();
	headerWriter.WriteLine("// this file has been auto-generated by rescompiler. do not hand-edit");
	headerWriter.WriteLine();
	headerWriter.WriteLine("#include \"ResIndex.h\"");
	headerWriter.WriteLine();
	headerWriter.WriteLine(String::Format("namespace %s", name.c_str()));
	headerWriter.WriteLine("{");
	//headerWriter.WriteLine("public:");

	for (size_t i = 0; i < index.m_Resources.size(); ++i)
	{
		ResInfo& info = index.m_Resources[i];
	
		std::string text = String::Format("\tconst static int %s = %d;", info.m_Name.c_str(), (int)i);
		
		headerWriter.WriteLine(text);
	}
	
	headerWriter.WriteLine(String::Format("\tconst extern CompiledResInfo ResIndex[%d];", (int)index.m_Resources.size()));
	
	headerWriter.WriteLine("};");
	
	// create source file
	
//	printf("creating source file\n");
	
	sourceWriter.WriteLine(String::Format("#include \"%s\"", Path::GetFileName(headerFileName).c_str()));
	sourceWriter.WriteLine();
	sourceWriter.WriteLine("// this file has been auto-generated by rescompiler. do not hand-edit");
	sourceWriter.WriteLine();

/*
	for (size_t i = 0; i < index.m_Resources.size(); ++i)
	{
		ResInfo& info = index.m_Resources[i];
	
		std::string text = String::Format("int %s::%s = %d;", name.c_str(), info.m_Name.c_str(), (int)i);
		
		sourceWriter.WriteLine(text);
	}
*/

	// create source file index
	
	sourceWriter.WriteLine(String::Format("const CompiledResInfo %s::ResIndex[%d] =", name.c_str(), (int)index.m_Resources.size()));
	sourceWriter.WriteLine("{");
	
	for (size_t i = 0; i < index.m_Resources.size(); ++i)
	{
		ResInfo& info = index.m_Resources[i];
	
		std::string fileName = info.m_FileName;
		
		if (info.m_Type != "binary")
			fileName = Path::StripExtension(fileName);
		
		std::string text = String::Format("\t{ %d, \"%s\", \"%s\", \"%s\" },", info.m_DataSetId, info.m_Type.c_str(), fileName.c_str(), info.m_Name.c_str());
		
		sourceWriter.WriteLine(text);
	}
	
	sourceWriter.WriteLine("};");
	
	// create index file
	
//	printf("creating index file\n");
	
	//StreamWriter indexWriter(indexStream, false);
	
	index.SaveBinary(indexStream);
}
