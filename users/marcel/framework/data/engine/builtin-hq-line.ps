static const char * s_hqLinePs = R"SHADER(

include engine/ShaderPS.txt

shader_in vec2 v_p;
shader_in vec2 v_p1;
shader_in vec2 v_p2;
shader_in float v_strokeSize;
shader_in vec3 v_edgePlane;
shader_in vec3 v_perpPlane;
shader_in vec4 v_color;

uniform sampler2D source;

float computeDistance(vec2 p)
{
	float de = dot(v_edgePlane, vec3(p, 1.0));
	
	float d1 = de < 0.0
		? length(v_p1 - p)
		: 0.0;
	
	float d2 = de > 1.0
		? length(v_p2 - p)
		: 0.0;
	
	float d3 = abs(dot(v_perpPlane, vec3(p, 1.0)));
	
	float d = max(max(d1, d2), d3);
	
	return d;
}

float distanceFade(float distance)
{
	//return clamp(v_strokeSize * abs(v_p.x-750.0)/100.0 - distance, 0.0, 1.0);
	return clamp(v_strokeSize - distance, 0.0, 1.0);
}

void main()
{
#if 0
	float v = distanceFade(computeDistance(v_p));
#else
	float v = 0.0;
	
	for (int ox = -2; ox <= +2; ++ox)
	{
		for (int oy = -2; oy <= +2; ++oy)
		{
			v += distanceFade(computeDistance(v_p + vec2(ox, oy) * 0.25));
		}
	}
	
	v /= 25.0;
#endif

	vec4 color = vec4(vec3(1), v);
	
	if (false)
	{
		//color = vec4(0.0, 1.0, 1.0, 1.0);
		color.a += 0.2;
		color.r = color.a;
	}
	
	color = color * v_color;
	
	shader_fragColor = color;
}

)SHADER";
