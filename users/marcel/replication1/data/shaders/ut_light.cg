
#define LIGHT_POSITIONAL

half2 lt_i(in half3 eye_dir, in half3 surf_pos, in half3 surf_norm, in half4 lt_pos)
{
	const half3 lt_dir = normalize(lt_pos.xyz - (surf_pos * lt_pos.w)); // Directional or positional depends on w.
	const half3 half_dir = normalize(eye_dir + lt_dir); // Not true half vector.

	const half n2l = saturate(dot(surf_norm, lt_dir));
	half n2h = saturate(dot(surf_norm, half_dir));

	//const half4 i = lit(n2l, n2h, 8.0f); // TODO: make exp optional. TODO: Create LUT for exp calculation.

#if 0
	const half exp2 = n2h * n2h;
	const half exp4 = exp2 * exp2;
	const half exp8 = exp4 * exp4;
	//const half exp16 = exp8 * exp8;

	n2h = exp8;
#else
	n2h = pow(n2h, 2);
#endif

	return half2(n2l, n2h);
}

half3 lt(in half3 eye_dir, in half3 surf_pos, in half3 surf_norm, in half4 lt_pos, in half3 diff_col, in half3 spec_col)
{
	const half2 i = lt_i(eye_dir, surf_pos, surf_norm, lt_pos);

	return i.x * diff_col + i.y * spec_col;
}

half2 lt_i_ex(in half3 eye_dir, in half3 lt_dir, in half3 surf_norm)
{
	const half3 half_dir = normalize(eye_dir + lt_dir); // Not true half vector.

	const half n2l = saturate(dot(surf_norm, lt_dir));

	half n2h = saturate(dot(surf_norm, half_dir));

#if 0
	const half exp2 = n2h * n2h;
	const half exp4 = exp2 * exp2;
	const half exp8 = exp4 * exp4;
	//const half exp16 = exp8 * exp8;

	n2h = exp8;
#else
	n2h = pow(n2h, 8);
#endif

	//const half4 i = lit(n2l, n2h, 16.0f); // TODO: make exp optional. TODO: Create LUT for exp calculation.
	//return i.yz;

	return half2(n2l, n2h);
}

half3 lt_ex(in half3 eye_dir, in half3 lt_dir, in half3 surf_norm, in half3 diff_col, in half3 spec_col)
{
	const half2 i = lt_i_ex(eye_dir, lt_dir, surf_norm);

	return i.x * diff_col + i.y * spec_col;
}

half3 unpack_norm_rgb(half3 rgb)
{
	return rgb * 2.0f - half3(1.0f, 1.0f, 1.0f);
}